{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "8872656f-fdee-342b-b2fe-1446d245d6e7",
              "name": "resources.rules.insecure-xml-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-xml-use"
              },
              "fullDescription": {
                "text": "Insecure XML parsing functionality, prefer 'defusedxml'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Insecure XML parsing functionality, prefer 'defusedxml'\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Insecure XML parsing functionality, prefer 'defusedxml'\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-xml-use"
                ]
              }
            },
            {
              "id": "6589617f-8aa7-3a0c-820b-3bb6c50f8fb3",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "d5bc5e67-7de6-3177-ad02-0de7aa67b483",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "8f61a726-64ac-32cb-8971-8e18519ea756",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "47cdcfbd-6c53-352e-9688-35f6661c3785",
              "name": "resources.rules.insecure-xml-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-xml-use"
              },
              "fullDescription": {
                "text": "Insecure XML parsing functionality, prefer 'defusedxml'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Insecure XML parsing functionality, prefer 'defusedxml'\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Insecure XML parsing functionality, prefer 'defusedxml'\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-xml-use"
                ]
              }
            },
            {
              "id": "de179e23-9903-3072-81d2-63bad5fe3d91",
              "name": "resources.rules.missing-no-install-recommends",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-no-install-recommends"
              },
              "fullDescription": {
                "text": "This 'apt-get install' is missing '--no-install-recommends'. This prevents\nunnecessary packages from being installed, thereby reducing image size. Add\n'--no-install-recommends'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This 'apt-get install' is missing '--no-install-recommends'. This prevents\nunnecessary packages from being installed, thereby reducing image size. Add\n'--no-install-recommends'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This 'apt-get install' is missing '--no-install-recommends'. This prevents\nunnecessary packages from being installed, thereby reducing image size. Add\n'--no-install-recommends'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3015](https://github.com/hadolint/hadolint/wiki/DL3015)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-no-install-recommends"
                ]
              }
            },
            {
              "id": "ac06fc2c-e371-33fb-a014-0c5c3c47fe37",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "2f643c7a-dc3d-329b-a334-95cc4a17db23",
              "name": "resources.rules.missing-image-version",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-image-version"
              },
              "fullDescription": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Images should be tagged with an explicit version to produce deterministic container images.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3006](https://github.com/hadolint/hadolint/wiki/DL3006)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-image-version"
                ]
              }
            },
            {
              "id": "8901e8ae-2fd7-3589-abbf-ef058e021935",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "5b2bc89f-7133-32a9-af36-67e0e8993852",
              "name": "resources.rules.missing-no-install-recommends",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-no-install-recommends"
              },
              "fullDescription": {
                "text": "This 'apt-get install' is missing '--no-install-recommends'. This prevents\nunnecessary packages from being installed, thereby reducing image size. Add\n'--no-install-recommends'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This 'apt-get install' is missing '--no-install-recommends'. This prevents\nunnecessary packages from being installed, thereby reducing image size. Add\n'--no-install-recommends'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This 'apt-get install' is missing '--no-install-recommends'. This prevents\nunnecessary packages from being installed, thereby reducing image size. Add\n'--no-install-recommends'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3015](https://github.com/hadolint/hadolint/wiki/DL3015)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-no-install-recommends"
                ]
              }
            },
            {
              "id": "8879ca19-176d-3207-beb0-740063f1f62f",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "c7da71de-a8ad-326a-bc4e-81f6f34f46c2",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "01f11bd4-0b2a-30d2-bf0a-1c914071a9f8",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "22c14813-f33d-3d97-8415-14dcc2bf4f55",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "ea058f43-8b8c-3566-84bc-63f6bbaa1d47",
              "name": "resources.rules.set-pipefail",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.set-pipefail"
              },
              "fullDescription": {
                "text": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set.\nIf you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command.\nIf you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set.\nIf you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command.\nIf you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set.\nIf you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command.\nIf you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL4006](https://github.com/hadolint/hadolint/wiki/DL4006)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.set-pipefail"
                ]
              }
            },
            {
              "id": "be5610c1-ac28-3598-9c57-aaf1f1e97acc",
              "name": "resources.rules.set-pipefail",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.set-pipefail"
              },
              "fullDescription": {
                "text": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set.\nIf you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command.\nIf you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set.\nIf you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command.\nIf you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set.\nIf you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command.\nIf you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL4006](https://github.com/hadolint/hadolint/wiki/DL4006)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.set-pipefail"
                ]
              }
            },
            {
              "id": "cfb96366-60ea-3a6a-b73d-9ea3cef65178",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "2a69e1bb-39c3-37dd-9271-33691f624e69",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "12e84eb4-f6bb-3898-a080-0da450290412",
              "name": "resources.rules.open-never-closed",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.open-never-closed"
              },
              "fullDescription": {
                "text": "file object opened without corresponding close"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "file object opened without corresponding close\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "file object opened without corresponding close\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.open-never-closed"
                ]
              }
            },
            {
              "id": "58eb9880-da88-38eb-8fab-1aaec3fc3644",
              "name": "resources.rules.tempfile-without-flush",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.tempfile-without-flush"
              },
              "fullDescription": {
                "text": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.tempfile-without-flush"
                ]
              }
            },
            {
              "id": "c2c28124-bc11-3cb8-823b-504fed4d2e0c",
              "name": "resources.rules.tempfile-without-flush",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.tempfile-without-flush"
              },
              "fullDescription": {
                "text": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.tempfile-without-flush"
                ]
              }
            },
            {
              "id": "0d1e5433-abf0-3e1d-a671-22289a94ee85",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "1abf4806-ef44-34be-877b-8ed6f7f2d262",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "35b8fd77-0c3e-3c61-bbe7-b40ef327d521",
              "name": "resources.rules.unquoted-csv-writer",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.unquoted-csv-writer"
              },
              "fullDescription": {
                "text": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://affinity-it-security.com/how-to-prevent-csv-injection/](https://affinity-it-security.com/how-to-prevent-csv-injection/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.unquoted-csv-writer"
                ]
              }
            },
            {
              "id": "919eaec1-cdcb-312f-90ce-78f11e0176b3",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "6619e568-a481-329b-92f8-24a8a98da51b",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "88579926-ab7e-3b5a-9e54-ad3cd193f2c5",
              "name": "resources.rules.unquoted-csv-writer",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.unquoted-csv-writer"
              },
              "fullDescription": {
                "text": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://affinity-it-security.com/how-to-prevent-csv-injection/](https://affinity-it-security.com/how-to-prevent-csv-injection/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.unquoted-csv-writer"
                ]
              }
            },
            {
              "id": "dbb12996-11d3-3ccd-b325-81944270cd6b",
              "name": "resources.rules.eqeq-is-bad",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.eqeq-is-bad"
              },
              "fullDescription": {
                "text": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.eqeq-is-bad"
                ]
              }
            },
            {
              "id": "e94b42b1-b422-3a96-a424-27afcfe35eff",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "4714baa8-27c3-31c4-a0d5-77686dd133e8",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "3cb8e8c5-badf-3f1e-ad6f-4d9ee7ebcc1c",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "139d5cdf-d2c5-3613-b0d0-d3eabd1c8235",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "cd523aa9-4fd4-32ae-93bd-c2b6d5d6ecba",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "e6222a69-83f3-3eff-9191-b558768584fd",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "f57c5bb1-d5c3-3ff2-ab68-a1b27aa1675d",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "a4a109dd-9168-3702-a0d4-170a6f5f4a37",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "346df240-2e87-3e82-b35f-c2284e5754c5",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "0e31d81c-484d-3409-a96c-a9dbabecc5c0",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "b1c0b718-85e2-3dd3-a39f-3b23c2787e3a",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "32f17061-1f41-39aa-be44-8df74e74bc9a",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "b2b551a3-4319-3173-9521-addb8336f4cb",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "54b38b04-e8ef-35e8-a85d-aa392c2e4bec",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "db16a701-b2b2-309c-889e-6dc6cc074aa7",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "c08f43f1-0799-3923-8b33-2353ad8e6932",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "251f9d19-47bc-3253-8cad-4384ead969df",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "c5072f49-cd6e-3b42-808f-4baacbdeb10b",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "9b8c52a2-5592-35ab-b6ff-42d3d0a71299",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "5d2633ad-78b5-3cfc-9537-de880bf51fa9",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "25c662ac-e3c1-3870-918d-6e1383e1b227",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "cf9c9fa1-aeba-3bbe-9b07-d74816ffc282",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "0cedfc6c-8871-3191-8d0c-1eb81140069d",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "a55bba16-acdf-3102-9ed8-7fc855acf90c",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "1990d968-7abf-3310-83cb-b17c814c5330",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "42678b78-35d7-3ac2-bd2e-c61d98b13256",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "0191b650-fed6-3d10-899f-cc669906ed09",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "0c196d44-af77-334c-961f-f9b156f4669c",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "89c5f82d-6abd-389b-877d-9fc2dce4b555",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "bdf7810a-5493-3106-9290-e305f302cf5a",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "e56da1c8-3d5b-3dac-a42a-310ce60068cc",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "266a5233-90fd-37c6-97d4-948aa3987832",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "75ec7169-96a4-316e-b506-716e2d934d51",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "efbf6ca8-5ee0-35a3-ab86-8c6165a1c0c0",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "276faebb-fd46-3064-a52c-195c64049328",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "ce3e4003-4fe4-35e5-9c83-cad3821fb46b",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "5e21eac2-4145-3028-9cbc-731c910ab90d",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "b482a911-1461-3d87-8c1b-39c8ad05b9a6",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "b4438c64-ca8b-3366-a844-31abfe4ab1db",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "ad1aa8d8-5e70-3c5a-816e-97446cef1088",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "fe4e1c3e-113e-3a92-920c-968733b3b347",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "a06746ea-c5e5-3308-9937-e3fc37f1772a",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "dff15895-583e-37f3-bf58-b5d67c74884f",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "9914fe11-2ad0-32ad-a297-da9277c46dfe",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "488307c7-d97a-392e-bfe7-30392b5291c3",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "8d46e3ea-a606-3081-b5eb-d5bbc39ffdfd",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "d264527a-8b58-3e7b-8533-943699611396",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "c118709a-d8d4-3d79-aec6-dab203ec1d9f",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "dd44f09a-70e2-314f-bd08-145539821981",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "61bc8393-5288-333b-a7bd-132b78c02bdf",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "11b0680d-8671-3b3d-a7e1-22127e0c0c67",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "cf25bd37-196c-32b9-a508-5cdb4aff0fca",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "d70e4365-7016-3467-af6f-b7de213f70e5",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "ede375a9-5c7e-3817-8dc3-619eb9c0814e",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "595ac37b-cfdc-3426-a71d-f4fb0cc9d271",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "f7b319ee-f83b-3dd9-85f7-8b9b2789824f",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "8841140f-b698-3c20-9e79-8ad5e35f36da",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "f272d29d-985b-38bf-8ad1-009377fa2464",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "d1e546ea-f66f-36e7-97b4-31df0917d7db",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "481aebfc-0f35-3848-9bf2-1df38e38bc0e",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "13c3a116-c02e-307e-8707-01ef0e4df8d8",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "a7b754a6-c7ba-3d4d-8b5c-0ed30c82f29c",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "0ad710d8-33b2-3f6a-a5ea-009a2f290b41",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "8ba828a6-a0d3-3b69-a8d8-bc0a142fac26",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "48ebee20-401a-3842-b285-adf7c5f0ffb9",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "0d8b2fde-e014-3add-b3f8-8f807978c45c",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "9a2bc83b-ccc7-3d81-8e32-31116333fa3e",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "2aeb12e7-3a40-3554-bba6-99df07ba965b",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "6a9eae35-3076-3393-80f9-cf12819fe1d4",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "9df710a7-7546-38e9-b938-b6efc1e74e8f",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "74686e2f-ba36-38f5-8faa-ac20df14c2ae",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "a7eee0fb-c2ee-3dc4-9ab0-5c760f1c2eec",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "15fdfcdd-d42b-3914-a9bc-5ddbd326f719",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "38a66476-c5fd-30b7-b800-e9c8239ca1e2",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "201a7e26-9718-30bf-aa5a-d27058256314",
              "name": "resources.rules.string-concat-in-list",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.string-concat-in-list"
              },
              "fullDescription": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.string-concat-in-list"
                ]
              }
            },
            {
              "id": "12449ed9-9ec1-30b1-bba0-74cf09b49e6f",
              "name": "resources.rules.unquoted-csv-writer",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.unquoted-csv-writer"
              },
              "fullDescription": {
                "text": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://affinity-it-security.com/how-to-prevent-csv-injection/](https://affinity-it-security.com/how-to-prevent-csv-injection/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.unquoted-csv-writer"
                ]
              }
            },
            {
              "id": "053ab7e3-c534-348f-a349-a2cb9f16e8a4",
              "name": "resources.rules.insecure-xml-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-xml-use"
              },
              "fullDescription": {
                "text": "Insecure XML parsing functionality, prefer 'defusedxml'"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Insecure XML parsing functionality, prefer 'defusedxml'\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Insecure XML parsing functionality, prefer 'defusedxml'\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-xml-use"
                ]
              }
            },
            {
              "id": "76522992-0dc8-37e5-851b-6bd37149619d",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "9368a25b-a10f-3412-b762-83138fd0bbc7",
              "name": "trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal"
              },
              "fullDescription": {
                "text": "Possible path traversal through `tarfile.open($PATH).extractall()` if the source tar is controlled by an attacker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal",
              "help": {
                "text": "Possible path traversal through `tarfile.open($PATH).extractall()` if the source tar is controlled by an attacker\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Possible path traversal through `tarfile.open($PATH).extractall()` if the source tar is controlled by an attacker\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal)\n - [https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.extractall](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.extractall)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal"
                ]
              }
            },
            {
              "id": "a8a1331a-40eb-3d18-a92a-c6bd8f8baf77",
              "name": "python.lang.security.deserialization.pickle.avoid-cPickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-cPickle"
              },
              "fullDescription": {
                "text": "Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-cPickle",
              "help": {
                "text": "Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-cPickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-cPickle"
                ]
              }
            },
            {
              "id": "8fc4b12b-bccc-37f2-adbe-36e761ad7750",
              "name": "python.lang.security.deserialization.pickle.avoid-cPickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-cPickle"
              },
              "fullDescription": {
                "text": "Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-cPickle",
              "help": {
                "text": "Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-cPickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-cPickle"
                ]
              }
            },
            {
              "id": "7e02a04e-2fde-3922-9818-75c9c99c21aa",
              "name": "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected"
              },
              "fullDescription": {
                "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
              "help": {
                "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected)\n - [https://cwe.mitre.org/data/definitions/939.html](https://cwe.mitre.org/data/definitions/939.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected"
                ]
              }
            },
            {
              "id": "61db280b-3c7d-327e-a6a1-9d3a4d18fee6",
              "name": "trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal"
              },
              "fullDescription": {
                "text": "Possible path traversal through `tarfile.open($PATH).extractall()` if the source tar is controlled by an attacker"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal",
              "help": {
                "text": "Possible path traversal through `tarfile.open($PATH).extractall()` if the source tar is controlled by an attacker\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Possible path traversal through `tarfile.open($PATH).extractall()` if the source tar is controlled by an attacker\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal)\n - [https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.extractall](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.extractall)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal"
                ]
              }
            },
            {
              "id": "892a679f-cded-3f75-8f9c-395e51c101f5",
              "name": "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected"
              },
              "fullDescription": {
                "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
              "help": {
                "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected)\n - [https://cwe.mitre.org/data/definitions/939.html](https://cwe.mitre.org/data/definitions/939.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected"
                ]
              }
            },
            {
              "id": "77577e86-10c3-355e-bed9-0d3616517295",
              "name": "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected"
              },
              "fullDescription": {
                "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
              "help": {
                "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected)\n - [https://cwe.mitre.org/data/definitions/939.html](https://cwe.mitre.org/data/definitions/939.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected"
                ]
              }
            },
            {
              "id": "e827fbe2-dcee-3fac-a6ec-d7044ee4e4e0",
              "name": "resources.rules.use-defused-xml",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-defused-xml"
              },
              "fullDescription": {
                "text": "Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)\nattacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'.\nSee https://github.com/tiran/defusedxml for more information.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)\nattacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'.\nSee https://github.com/tiran/defusedxml for more information.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)\nattacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'.\nSee https://github.com/tiran/defusedxml for more information.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://docs.python.org/3/library/xml.html](https://docs.python.org/3/library/xml.html)\n - [https://github.com/tiran/defusedxml](https://github.com/tiran/defusedxml)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-defused-xml"
                ]
              }
            },
            {
              "id": "6aa75c5d-5618-38cf-8256-770c0f449fb8",
              "name": "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected"
              },
              "fullDescription": {
                "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
              "help": {
                "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected)\n - [https://cwe.mitre.org/data/definitions/939.html](https://cwe.mitre.org/data/definitions/939.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected"
                ]
              }
            },
            {
              "id": "f3d83d7a-fdcb-36e9-95f2-09b0a32c4ab2",
              "name": "python.lang.security.use-defused-xml-parse.use-defused-xml-parse",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.use-defused-xml-parse.use-defused-xml-parse"
              },
              "fullDescription": {
                "text": "The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse",
              "help": {
                "text": "The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse)\n - [https://docs.python.org/3/library/xml.html](https://docs.python.org/3/library/xml.html)\n - [https://github.com/tiran/defusedxml](https://github.com/tiran/defusedxml)\n - [https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing](https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.use-defused-xml-parse.use-defused-xml-parse"
                ]
              }
            },
            {
              "id": "25e8cb54-38c0-307b-9d7d-15a6bb550be3",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "67e66c26-a7b9-37f3-898f-dceb85e80737",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "c2c2e148-0959-3524-9a4c-216e1a479e8e",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "d52221fe-8e41-3d03-80f4-015c5563093d",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "7c100114-38c1-340d-b32f-e1b37e78547d",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "967e91a7-cb98-3e26-9bf7-5cf9253a02b1",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "78778830-5536-31aa-a857-ae30f35dcd00",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "8261e631-1c8c-30ef-9bba-55605d36c54c",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "8872656f-fdee-342b-b2fe-1446d245d6e7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure XML parsing functionality, prefer 'defusedxml'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/dataset_tools/create_pascal_tf_record.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 13,
                  "endLine": 174,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      xml = etree.fromstring(xml_str)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e0688960d72bfb048e7e8ead613e6ceb268cc4fede39e1fa4cba458fe8d8d9554460f7e25c92933e1ea1069699acd01b5c9f3c4b332681301c1fbe0fd13ced2e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6589617f-8aa7-3a0c-820b-3bb6c50f8fb3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/core/keypoint_ops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 31,
                  "endLine": 195,
                  "endColumn": 44,
                  "snippet": {
                    "text": "                             ['maximum keypoint coordinate value is larger '\n                              'than 1.01: ', max_val])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "edf471f1b7525767814c9b5fd149b1c8b690c9aa6cf131ea480e19b5e9826376bd0c946528237891d113a3b7fc5917437279d0f19ae17b87f74809db035ddbbb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d5bc5e67-7de6-3177-ad02-0de7aa67b483",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/core/box_list_ops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 839,
                  "startColumn": 12,
                  "endLine": 840,
                  "endColumn": 23,
                  "snippet": {
                    "text": "          ['maximum box coordinate value is larger '\n           'than %f: ' % maximum_normalized_coordinate, box_maximum])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2665bca9cbb48d812301a7845833aaeb299edfa6514ca84d0f91930a9a87167d3b3c87d0c00b31da1480bfd3ab68213343ccbef114aa9777e07a89057e1d4174_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8f61a726-64ac-32cb-8971-8e18519ea756",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/core/box_list_ops.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 973,
                  "startColumn": 8,
                  "endLine": 974,
                  "endColumn": 24,
                  "snippet": {
                    "text": "      ['Each box in selected_boxes must match with at least one box '\n       'in pool_boxes.'])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2665bca9cbb48d812301a7845833aaeb299edfa6514ca84d0f91930a9a87167d3b3c87d0c00b31da1480bfd3ab68213343ccbef114aa9777e07a89057e1d4174_1"
          },
          "properties": {}
        },
        {
          "ruleId": "47cdcfbd-6c53-352e-9688-35f6661c3785",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure XML parsing functionality, prefer 'defusedxml'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/dataset_tools/create_pet_tf_record.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 13,
                  "endLine": 250,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      xml = etree.fromstring(xml_str)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bb3c90ebc1a2ec8275969f3ebe143d6a849a8e46e3dada71de0b268af89040f9966b96a1df8c74c8dddd3bfeb9c082510cd17e4dda1306af0512f91fca73efe0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "de179e23-9903-3072-81d2-63bad5fe3d91",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'apt-get install' is missing '--no-install-recommends'. This prevents\nunnecessary packages from being installed, thereby reducing image size. Add\n'--no-install-recommends'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/dockerfiles/android/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 1,
                  "endLine": 36,
                  "endColumn": 23,
                  "snippet": {
                    "text": "RUN apt-get install -y protobuf-compiler python-pil python-lxml python-tk && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bf93bfcd6edb888c8f0f501d8f8c9907ba6431c270469aa87297b06ad4f3f60c2f0fc10d0b9388e48b4a08892276a1f0d5e9258bd9a5263d884cb3a763e37725_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ac06fc2c-e371-33fb-a014-0c5c3c47fe37",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'([A-Za-z_]+)(_[0-9]+\\.jpg)'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/dataset_tools/create_pet_tf_record.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 11,
                  "endLine": 72,
                  "endColumn": 67,
                  "snippet": {
                    "text": "  match = re.match(r'([A-Za-z_]+)(_[0-9]+\\.jpg)', file_name, re.I)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a0606246a56e224178c9fd6d9425b3e2657a1e6ea9621a7fa812943c706e5b819bd6d6d54b55abb94585200ef1ebac1851621e26b6bd61e22eea707fc17a5822_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2f643c7a-dc3d-329b-a334-95cc4a17db23",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Images should be tagged with an explicit version to produce deterministic container images."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/dockerfiles/android/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 16,
                  "snippet": {
                    "text": "FROM tensorflow/tensorflow:nightly-devel"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c19ba18501e6a582cd0e2d8928088fba54696fd4ce755e71990eb67e952db100dfbc3bd8ad97858cfd4f90ef9c9c31032285f3c1e6e3aa52c28128e8847c6e04_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8901e8ae-2fd7-3589-abbf-ef058e021935",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/dockerfiles/android/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN git clone --depth 1 https://github.com/cocodataset/cocoapi.git && \\\n    cd cocoapi/PythonAPI && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "44dd973d229223bdd52fe801289174d3251d859a270d56bf0f733681b2d70d9c29e74e29146a11e231b959cab381e1278d56476b9925309f51658c2c16aa91ae_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5b2bc89f-7133-32a9-af36-67e0e8993852",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'apt-get install' is missing '--no-install-recommends'. This prevents\nunnecessary packages from being installed, thereby reducing image size. Add\n'--no-install-recommends'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/dockerfiles/android/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 1,
                  "endLine": 67,
                  "endColumn": 23,
                  "snippet": {
                    "text": "RUN apt-get install -y wget vim emacs nano"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bf93bfcd6edb888c8f0f501d8f8c9907ba6431c270469aa87297b06ad4f3f60c2f0fc10d0b9388e48b4a08892276a1f0d5e9258bd9a5263d884cb3a763e37725_1"
          },
          "properties": {}
        },
        {
          "ruleId": "8879ca19-176d-3207-beb0-740063f1f62f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/dockerfiles/android/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN cd /tensorflow/models/research && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "44dd973d229223bdd52fe801289174d3251d859a270d56bf0f733681b2d70d9c29e74e29146a11e231b959cab381e1278d56476b9925309f51658c2c16aa91ae_1"
          },
          "properties": {}
        },
        {
          "ruleId": "c7da71de-a8ad-326a-bc4e-81f6f34f46c2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/dockerfiles/android/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 1,
                  "endLine": 81,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN cd /tmp && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "44dd973d229223bdd52fe801289174d3251d859a270d56bf0f733681b2d70d9c29e74e29146a11e231b959cab381e1278d56476b9925309f51658c2c16aa91ae_3"
          },
          "properties": {}
        },
        {
          "ruleId": "01f11bd4-0b2a-30d2-bf0a-1c914071a9f8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/dockerfiles/android/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 1,
                  "endLine": 106,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN cd /opt && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "44dd973d229223bdd52fe801289174d3251d859a270d56bf0f733681b2d70d9c29e74e29146a11e231b959cab381e1278d56476b9925309f51658c2c16aa91ae_5"
          },
          "properties": {}
        },
        {
          "ruleId": "22c14813-f33d-3d97-8415-14dcc2bf4f55",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/dockerfiles/android/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 1,
                  "endLine": 88,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN cd /tmp && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "44dd973d229223bdd52fe801289174d3251d859a270d56bf0f733681b2d70d9c29e74e29146a11e231b959cab381e1278d56476b9925309f51658c2c16aa91ae_4"
          },
          "properties": {}
        },
        {
          "ruleId": "ea058f43-8b8c-3566-84bc-63f6bbaa1d47",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set.\nIf you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command.\nIf you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/dockerfiles/android/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 1,
                  "endLine": 114,
                  "endColumn": 21,
                  "snippet": {
                    "text": "RUN yes | sdkmanager --licenses"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "08d235876e88c056e3f9fa6b95ebe2262ab21113bd05b573c658769f9b61843f056a1f70febdb7645351b469173bcfe9781affa0eee090e18733eb831c68b50a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "be5610c1-ac28-3598-9c57-aaf1f1e97acc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set.\nIf you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command.\nIf you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/dockerfiles/android/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 1,
                  "endLine": 117,
                  "endColumn": 21,
                  "snippet": {
                    "text": "RUN yes | sdkmanager \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "08d235876e88c056e3f9fa6b95ebe2262ab21113bd05b573c658769f9b61843f056a1f70febdb7645351b469173bcfe9781affa0eee090e18733eb831c68b50a_1"
          },
          "properties": {}
        },
        {
          "ruleId": "cfb96366-60ea-3a6a-b73d-9ea3cef65178",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/dockerfiles/android/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 1,
                  "endLine": 132,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN cd /tensorflow && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "44dd973d229223bdd52fe801289174d3251d859a270d56bf0f733681b2d70d9c29e74e29146a11e231b959cab381e1278d56476b9925309f51658c2c16aa91ae_7"
          },
          "properties": {}
        },
        {
          "ruleId": "2a69e1bb-39c3-37dd-9271-33691f624e69",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/dockerfiles/android/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 1,
                  "endLine": 126,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN cd /opt && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "44dd973d229223bdd52fe801289174d3251d859a270d56bf0f733681b2d70d9c29e74e29146a11e231b959cab381e1278d56476b9925309f51658c2c16aa91ae_6"
          },
          "properties": {}
        },
        {
          "ruleId": "12e84eb4-f6bb-3898-a080-0da450290412",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "file object opened without corresponding close"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/export_tflite_ssd_graph_lib.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 5,
                  "endLine": 273,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    moving_average_checkpoint = tempfile.NamedTemporaryFile()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9f72702c3dfdd883f278aebdc59ee8e7c815583ea262cfd4f133a037e73c0d17f23098413662760ef79219dc38b20735a71f6c2eb5453144cc6ec6d4a6191b78_0"
          },
          "properties": {}
        },
        {
          "ruleId": "58eb9880-da88-38eb-8fab-1aaec3fc3644",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Using 'moving_average_checkpoint.name' without '.flush()' or '.close()' may cause an error because the file may not exist when 'moving_average_checkpoint.name' is used. Use '.flush()' or close the file before using 'moving_average_checkpoint.name'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/export_tflite_ssd_graph_lib.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 9,
                  "endLine": 276,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        moving_average_checkpoint.name)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "93571d04fc767947baf857069ecfff6f6fa5c896692e6bb1efe363539f27c9a4195dee230eacbf1fb4aed5760c9914d2143a42c06551a9f3579ef91c159875ac_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c2c28124-bc11-3cb8-823b-504fed4d2e0c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Using 'moving_average_checkpoint.name' without '.flush()' or '.close()' may cause an error because the file may not exist when 'moving_average_checkpoint.name' is used. Use '.flush()' or close the file before using 'moving_average_checkpoint.name'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/export_tflite_ssd_graph_lib.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 25,
                  "endLine": 277,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    checkpoint_to_use = moving_average_checkpoint.name"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "93571d04fc767947baf857069ecfff6f6fa5c896692e6bb1efe363539f27c9a4195dee230eacbf1fb4aed5760c9914d2143a42c06551a9f3579ef91c159875ac_1"
          },
          "properties": {}
        },
        {
          "ruleId": "0d1e5433-abf0-3e1d-a671-22289a94ee85",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'\"bbox\":\\s+\\[\\n\\s+\\d+.\\d\\d\\d\\d,'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/metrics/coco_tools_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 17,
                  "endLine": 100,
                  "endColumn": 76,
                  "snippet": {
                    "text": "      matcher = re.compile(r'\"bbox\":\\s+\\[\\n\\s+\\d+.\\d\\d\\d\\d,', re.MULTILINE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "09beddfe412d79466064d5aa731c7c082feb8ba35138a435e563f61afb4ccb8b774621255821c9087b0731ad4996b72606469800e7f6914268b7042b95991811_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1abf4806-ef44-34be-877b-8ed6f7f2d262",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'\"bbox\":\\s+\\[\\n\\s+\\d+.\\d\\d\\d\\d,'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/metrics/coco_tools_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 17,
                  "endLine": 126,
                  "endColumn": 76,
                  "snippet": {
                    "text": "      matcher = re.compile(r'\"bbox\":\\s+\\[\\n\\s+\\d+.\\d\\d\\d\\d,', re.MULTILINE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "09beddfe412d79466064d5aa731c7c082feb8ba35138a435e563f61afb4ccb8b774621255821c9087b0731ad4996b72606469800e7f6914268b7042b95991811_1"
          },
          "properties": {}
        },
        {
          "ruleId": "35b8fd77-0c3e-3c61-bbe7-b40ef327d521",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/metrics/io_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 20,
                  "endLine": 32,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  metrics_writer = csv.writer(fid, delimiter=',')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d6a3e07b0d6220228d80dccdd7256a71ad9275d730202bac3453daa73876c48abe95040ce50aad97225ddf45c1816e41e9ba65e16fb29994bbdb118903cdd297_0"
          },
          "properties": {}
        },
        {
          "ruleId": "919eaec1-cdcb-312f-90ce-78f11e0176b3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'@(\\d{1,})'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/metrics/offline_eval_map_corloc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 7,
                  "endLine": 58,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  m = re.search(r'@(\\d{1,})', filename)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9341ff2d5b99843a5e55dec8916e53e78acf73ebca5839a726e1d9d3cb9808bacc387d3dbc4fbe3e39195d7c06231556258e65578e949cf156af6ee34c42fd94_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6619e568-a481-329b-92f8-24a8a98da51b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'@(\\d{1,})'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/metrics/offline_eval_map_corloc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 9,
                  "endLine": 62,
                  "endColumn": 74,
                  "snippet": {
                    "text": "        re.sub(r'@(\\d{1,})', '-%.5d-of-%.5d' % (i, num_shards), filename)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9341ff2d5b99843a5e55dec8916e53e78acf73ebca5839a726e1d9d3cb9808bacc387d3dbc4fbe3e39195d7c06231556258e65578e949cf156af6ee34c42fd94_1"
          },
          "properties": {}
        },
        {
          "ruleId": "88579926-ab7e-3b5a-9e54-ad3cd193f2c5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/metrics/offline_eval_map_corloc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 22,
                  "endLine": 145,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    metrics_writer = csv.writer(csvfile, delimiter=',')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "09044888e9df1e9921f19e8103962a0761b886063f450b6f38ca0e035c395fb3ebb708313ea0af4fec599e5edf44c1699a1442402578bff0d4b551f97e9a45d7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "dbb12996-11d3-3ccd-b325-81944270cd6b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "data_format == data_format is a useless equality check"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/models/faster_rcnn_inception_v2_feature_extractor.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 23,
                  "endLine": 162,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    concat_dim = 3 if data_format == 'NHWC' else 1"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "72eb259131c8ce53c7a838eb8c0dd287e083dcdea76625d8b1fbbafe8cbcbae6645a1da21c5a45d1a86aa516aff9405c9f02d18fdf5d4eb2d5dbdfcb1ea4e5b2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e94b42b1-b422-3a96-a424-27afcfe35eff",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/models/feature_map_generators.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 13,
                  "endLine": 184,
                  "endColumn": 60,
                  "snippet": {
                    "text": "            return ops.fixed_padding(features, kernel_size)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "03269cbb2fa8a65e0d19ff46485376499b19504a81c2e5586712456da995e598e30bd8edf1cf5774c339cb81639c4d9c5e979924a1a851a1df8e9af06d637aa8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4714baa8-27c3-31c4-a0d5-77686dd133e8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 485,
                  "startColumn": 9,
                  "endLine": 486,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_0/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3cb8e8c5-badf-3f1e-ad6f-4d9ee7ebcc1c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 487,
                  "startColumn": 9,
                  "endLine": 488,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_0/BatchNorm/feature_0/beta'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_1"
          },
          "properties": {}
        },
        {
          "ruleId": "139d5cdf-d2c5-3613-b0d0-d3eabd1c8235",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 9,
                  "endLine": 490,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_0/BatchNorm/feature_1/beta'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_2"
          },
          "properties": {}
        },
        {
          "ruleId": "cd523aa9-4fd4-32ae-93bd-c2b6d5d6ecba",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 491,
                  "startColumn": 9,
                  "endLine": 492,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_1/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_3"
          },
          "properties": {}
        },
        {
          "ruleId": "e6222a69-83f3-3eff-9191-b558768584fd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 493,
                  "startColumn": 9,
                  "endLine": 494,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_1/BatchNorm/feature_0/beta'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_4"
          },
          "properties": {}
        },
        {
          "ruleId": "f57c5bb1-d5c3-3ff2-ab68-a1b27aa1675d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 495,
                  "startColumn": 9,
                  "endLine": 496,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_1/BatchNorm/feature_1/beta'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_5"
          },
          "properties": {}
        },
        {
          "ruleId": "a4a109dd-9168-3702-a0d4-170a6f5f4a37",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 498,
                  "startColumn": 9,
                  "endLine": 499,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictor/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_6"
          },
          "properties": {}
        },
        {
          "ruleId": "346df240-2e87-3e82-b35f-c2284e5754c5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500,
                  "startColumn": 9,
                  "endLine": 501,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictor/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_7"
          },
          "properties": {}
        },
        {
          "ruleId": "0e31d81c-484d-3409-a96c-a9dbabecc5c0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 503,
                  "startColumn": 9,
                  "endLine": 504,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_0/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_8"
          },
          "properties": {}
        },
        {
          "ruleId": "b1c0b718-85e2-3dd3-a39f-3b23c2787e3a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 505,
                  "startColumn": 9,
                  "endLine": 506,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_0/BatchNorm/feature_0/beta'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_9"
          },
          "properties": {}
        },
        {
          "ruleId": "32f17061-1f41-39aa-be44-8df74e74bc9a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 507,
                  "startColumn": 9,
                  "endLine": 508,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_0/BatchNorm/feature_1/beta'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_10"
          },
          "properties": {}
        },
        {
          "ruleId": "b2b551a3-4319-3173-9521-addb8336f4cb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 509,
                  "startColumn": 9,
                  "endLine": 510,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_1/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_11"
          },
          "properties": {}
        },
        {
          "ruleId": "54b38b04-e8ef-35e8-a85d-aa392c2e4bec",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 511,
                  "startColumn": 9,
                  "endLine": 512,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_1/BatchNorm/feature_0/beta'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_12"
          },
          "properties": {}
        },
        {
          "ruleId": "db16a701-b2b2-309c-889e-6dc6cc074aa7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 9,
                  "endLine": 514,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_1/BatchNorm/feature_1/beta'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_13"
          },
          "properties": {}
        },
        {
          "ruleId": "c08f43f1-0799-3923-8b33-2353ad8e6932",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 516,
                  "startColumn": 9,
                  "endLine": 517,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictor/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_14"
          },
          "properties": {}
        },
        {
          "ruleId": "251f9d19-47bc-3253-8cad-4384ead969df",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 9,
                  "endLine": 519,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictor/biases')])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_15"
          },
          "properties": {}
        },
        {
          "ruleId": "c5072f49-cd6e-3b42-808f-4baacbdeb10b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 553,
                  "startColumn": 9,
                  "endLine": 554,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_0/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_16"
          },
          "properties": {}
        },
        {
          "ruleId": "9b8c52a2-5592-35ab-b6ff-42d3d0a71299",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 9,
                  "endLine": 556,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_0/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_17"
          },
          "properties": {}
        },
        {
          "ruleId": "5d2633ad-78b5-3cfc-9537-de880bf51fa9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 557,
                  "startColumn": 9,
                  "endLine": 558,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_1/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_18"
          },
          "properties": {}
        },
        {
          "ruleId": "25c662ac-e3c1-3870-918d-6e1383e1b227",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 559,
                  "startColumn": 9,
                  "endLine": 560,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_1/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_19"
          },
          "properties": {}
        },
        {
          "ruleId": "cf9c9fa1-aeba-3bbe-9b07-d74816ffc282",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 562,
                  "startColumn": 9,
                  "endLine": 563,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictor/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_20"
          },
          "properties": {}
        },
        {
          "ruleId": "0cedfc6c-8871-3191-8d0c-1eb81140069d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 564,
                  "startColumn": 9,
                  "endLine": 565,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictor/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_21"
          },
          "properties": {}
        },
        {
          "ruleId": "a55bba16-acdf-3102-9ed8-7fc855acf90c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 567,
                  "startColumn": 9,
                  "endLine": 568,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_0/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_22"
          },
          "properties": {}
        },
        {
          "ruleId": "1990d968-7abf-3310-83cb-b17c814c5330",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 9,
                  "endLine": 570,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_0/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_23"
          },
          "properties": {}
        },
        {
          "ruleId": "42678b78-35d7-3ac2-bd2e-c61d98b13256",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 571,
                  "startColumn": 9,
                  "endLine": 572,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_1/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_24"
          },
          "properties": {}
        },
        {
          "ruleId": "0191b650-fed6-3d10-899f-cc669906ed09",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 573,
                  "startColumn": 9,
                  "endLine": 574,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_1/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_25"
          },
          "properties": {}
        },
        {
          "ruleId": "0c196d44-af77-334c-961f-f9b156f4669c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 9,
                  "endLine": 577,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictor/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_26"
          },
          "properties": {}
        },
        {
          "ruleId": "89c5f82d-6abd-389b-877d-9fc2dce4b555",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 578,
                  "startColumn": 9,
                  "endLine": 579,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictor/biases')])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_27"
          },
          "properties": {}
        },
        {
          "ruleId": "bdf7810a-5493-3106-9290-e305f302cf5a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 614,
                  "startColumn": 9,
                  "endLine": 615,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_0/depthwise_weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_28"
          },
          "properties": {}
        },
        {
          "ruleId": "e56da1c8-3d5b-3dac-a42a-310ce60068cc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 9,
                  "endLine": 617,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_0/pointwise_weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_29"
          },
          "properties": {}
        },
        {
          "ruleId": "266a5233-90fd-37c6-97d4-948aa3987832",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 618,
                  "startColumn": 9,
                  "endLine": 619,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_0/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_30"
          },
          "properties": {}
        },
        {
          "ruleId": "75ec7169-96a4-316e-b506-716e2d934d51",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 9,
                  "endLine": 621,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_1/depthwise_weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_31"
          },
          "properties": {}
        },
        {
          "ruleId": "efbf6ca8-5ee0-35a3-ab86-8c6165a1c0c0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 622,
                  "startColumn": 9,
                  "endLine": 623,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_1/pointwise_weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_32"
          },
          "properties": {}
        },
        {
          "ruleId": "276faebb-fd46-3064-a52c-195c64049328",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 624,
                  "startColumn": 9,
                  "endLine": 625,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_1/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_33"
          },
          "properties": {}
        },
        {
          "ruleId": "ce3e4003-4fe4-35e5-9c83-cad3821fb46b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 627,
                  "startColumn": 9,
                  "endLine": 628,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictor/depthwise_weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_34"
          },
          "properties": {}
        },
        {
          "ruleId": "5e21eac2-4145-3028-9cbc-731c910ab90d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 629,
                  "startColumn": 9,
                  "endLine": 630,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictor/pointwise_weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_35"
          },
          "properties": {}
        },
        {
          "ruleId": "b482a911-1461-3d87-8c1b-39c8ad05b9a6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 631,
                  "startColumn": 9,
                  "endLine": 632,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictor/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_36"
          },
          "properties": {}
        },
        {
          "ruleId": "b4438c64-ca8b-3366-a844-31abfe4ab1db",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 634,
                  "startColumn": 9,
                  "endLine": 635,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_0/depthwise_weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_37"
          },
          "properties": {}
        },
        {
          "ruleId": "ad1aa8d8-5e70-3c5a-816e-97446cef1088",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 636,
                  "startColumn": 9,
                  "endLine": 637,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_0/pointwise_weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_38"
          },
          "properties": {}
        },
        {
          "ruleId": "fe4e1c3e-113e-3a92-920c-968733b3b347",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 9,
                  "endLine": 639,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_0/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_39"
          },
          "properties": {}
        },
        {
          "ruleId": "a06746ea-c5e5-3308-9937-e3fc37f1772a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 9,
                  "endLine": 641,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_1/depthwise_weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_40"
          },
          "properties": {}
        },
        {
          "ruleId": "dff15895-583e-37f3-bf58-b5d67c74884f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 642,
                  "startColumn": 9,
                  "endLine": 643,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_1/pointwise_weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_41"
          },
          "properties": {}
        },
        {
          "ruleId": "9914fe11-2ad0-32ad-a297-da9277c46dfe",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 9,
                  "endLine": 645,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_1/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_42"
          },
          "properties": {}
        },
        {
          "ruleId": "488307c7-d97a-392e-bfe7-30392b5291c3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 647,
                  "startColumn": 9,
                  "endLine": 648,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictor/depthwise_weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_43"
          },
          "properties": {}
        },
        {
          "ruleId": "8d46e3ea-a606-3081-b5eb-d5bbc39ffdfd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 649,
                  "startColumn": 9,
                  "endLine": 650,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictor/pointwise_weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_44"
          },
          "properties": {}
        },
        {
          "ruleId": "d264527a-8b58-3e7b-8533-943699611396",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 651,
                  "startColumn": 9,
                  "endLine": 652,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictor/biases')])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_45"
          },
          "properties": {}
        },
        {
          "ruleId": "c118709a-d8d4-3d79-aec6-dab203ec1d9f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 685,
                  "startColumn": 9,
                  "endLine": 686,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_0/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_46"
          },
          "properties": {}
        },
        {
          "ruleId": "dd44f09a-70e2-314f-bd08-145539821981",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 687,
                  "startColumn": 9,
                  "endLine": 688,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_0/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_47"
          },
          "properties": {}
        },
        {
          "ruleId": "61bc8393-5288-333b-a7bd-132b78c02bdf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 689,
                  "startColumn": 9,
                  "endLine": 690,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_1/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_48"
          },
          "properties": {}
        },
        {
          "ruleId": "11b0680d-8671-3b3d-a7e1-22127e0c0c67",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 691,
                  "startColumn": 9,
                  "endLine": 692,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictionTower/conv2d_1/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_49"
          },
          "properties": {}
        },
        {
          "ruleId": "cf25bd37-196c-32b9-a508-5cdb4aff0fca",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 694,
                  "startColumn": 9,
                  "endLine": 695,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictor/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_50"
          },
          "properties": {}
        },
        {
          "ruleId": "d70e4365-7016-3467-af6f-b7de213f70e5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 696,
                  "startColumn": 9,
                  "endLine": 697,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictor/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_51"
          },
          "properties": {}
        },
        {
          "ruleId": "ede375a9-5c7e-3817-8dc3-619eb9c0814e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 699,
                  "startColumn": 9,
                  "endLine": 700,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_0/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_52"
          },
          "properties": {}
        },
        {
          "ruleId": "595ac37b-cfdc-3426-a71d-f4fb0cc9d271",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 701,
                  "startColumn": 9,
                  "endLine": 702,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_0/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_53"
          },
          "properties": {}
        },
        {
          "ruleId": "f7b319ee-f83b-3dd9-85f7-8b9b2789824f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 9,
                  "endLine": 704,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_1/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_54"
          },
          "properties": {}
        },
        {
          "ruleId": "8841140f-b698-3c20-9e79-8ad5e35f36da",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 705,
                  "startColumn": 9,
                  "endLine": 706,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictionTower/conv2d_1/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_55"
          },
          "properties": {}
        },
        {
          "ruleId": "f272d29d-985b-38bf-8ad1-009377fa2464",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 708,
                  "startColumn": 9,
                  "endLine": 709,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictor/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_56"
          },
          "properties": {}
        },
        {
          "ruleId": "d1e546ea-f66f-36e7-97b4-31df0917d7db",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 710,
                  "startColumn": 9,
                  "endLine": 711,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictor/biases')])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_57"
          },
          "properties": {}
        },
        {
          "ruleId": "481aebfc-0f35-3848-9bf2-1df38e38bc0e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 745,
                  "startColumn": 9,
                  "endLine": 746,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'PredictionTower/conv2d_0/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_58"
          },
          "properties": {}
        },
        {
          "ruleId": "13c3a116-c02e-307e-8707-01ef0e4df8d8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 747,
                  "startColumn": 9,
                  "endLine": 748,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'PredictionTower/conv2d_0/BatchNorm/feature_0/beta'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_59"
          },
          "properties": {}
        },
        {
          "ruleId": "a7b754a6-c7ba-3d4d-8b5c-0ed30c82f29c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 749,
                  "startColumn": 9,
                  "endLine": 750,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'PredictionTower/conv2d_0/BatchNorm/feature_1/beta'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_60"
          },
          "properties": {}
        },
        {
          "ruleId": "0ad710d8-33b2-3f6a-a5ea-009a2f290b41",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 751,
                  "startColumn": 9,
                  "endLine": 752,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'PredictionTower/conv2d_1/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_61"
          },
          "properties": {}
        },
        {
          "ruleId": "8ba828a6-a0d3-3b69-a8d8-bc0a142fac26",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 753,
                  "startColumn": 9,
                  "endLine": 754,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'PredictionTower/conv2d_1/BatchNorm/feature_0/beta'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_62"
          },
          "properties": {}
        },
        {
          "ruleId": "48ebee20-401a-3842-b285-adf7c5f0ffb9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 755,
                  "startColumn": 9,
                  "endLine": 756,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'PredictionTower/conv2d_1/BatchNorm/feature_1/beta'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_63"
          },
          "properties": {}
        },
        {
          "ruleId": "0d8b2fde-e014-3add-b3f8-8f807978c45c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 758,
                  "startColumn": 9,
                  "endLine": 759,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictor/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_64"
          },
          "properties": {}
        },
        {
          "ruleId": "9a2bc83b-ccc7-3d81-8e32-31116333fa3e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 9,
                  "endLine": 761,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictor/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_65"
          },
          "properties": {}
        },
        {
          "ruleId": "2aeb12e7-3a40-3554-bba6-99df07ba965b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 763,
                  "startColumn": 9,
                  "endLine": 764,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictor/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_66"
          },
          "properties": {}
        },
        {
          "ruleId": "6a9eae35-3076-3393-80f9-cf12819fe1d4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 765,
                  "startColumn": 9,
                  "endLine": 766,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictor/biases')])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_67"
          },
          "properties": {}
        },
        {
          "ruleId": "9df710a7-7546-38e9-b938-b6efc1e74e8f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 9,
                  "endLine": 804,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'PredictionTower/conv2d_0/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_69"
          },
          "properties": {}
        },
        {
          "ruleId": "74686e2f-ba36-38f5-8faa-ac20df14c2ae",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 805,
                  "startColumn": 9,
                  "endLine": 806,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'PredictionTower/conv2d_1/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_70"
          },
          "properties": {}
        },
        {
          "ruleId": "a7eee0fb-c2ee-3dc4-9ab0-5c760f1c2eec",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 807,
                  "startColumn": 9,
                  "endLine": 808,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'PredictionTower/conv2d_1/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_71"
          },
          "properties": {}
        },
        {
          "ruleId": "15fdfcdd-d42b-3914-a9bc-5ddbd326f719",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 812,
                  "startColumn": 9,
                  "endLine": 813,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'BoxPredictor/biases'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_73"
          },
          "properties": {}
        },
        {
          "ruleId": "38a66476-c5fd-30b7-b800-e9c8239ca1e2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 815,
                  "startColumn": 9,
                  "endLine": 816,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictor/weights'),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_74"
          },
          "properties": {}
        },
        {
          "ruleId": "201a7e26-9718-30bf-aa5a-d27058256314",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected strings that are implicitly concatenated inside a list.\nPython will implicitly concatenate strings when not explicitly delimited.\nWas this supposed to be individual elements of the list?\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/predictors/convolutional_box_predictor_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 817,
                  "startColumn": 9,
                  "endLine": 818,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        ('BoxPredictor/WeightSharedConvolutionalBoxPredictor/'\n         'ClassPredictor/biases')])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "13b084f12e27a615984ea6d436e0e628fe4e622157e94cb7b4b38b1074131e49b9bc8ab23fca596a3747dcfdaf8bdff1595dff2d32a9fd0e7c4b71d1ce45e733_75"
          },
          "properties": {}
        },
        {
          "ruleId": "12449ed9-9ec1-30b1-bba0-74cf09b49e6f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/utils/category_util.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 14,
                  "endLine": 70,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    writer = csv.writer(csvfile, delimiter=',', quotechar='\"')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4096a5d7bba20bacc657e4632d2d1deaf50dc21f999f2d643a2a46078482c3669213510eef20c4fba8c50ccaf111bfdf677c59e0f2818f96ff0544428c247df3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "053ab7e3-c534-348f-a349-a2cb9f16e8a4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure XML parsing functionality, prefer 'defusedxml'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/utils/dataset_util.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 11,
                  "endLine": 86,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  return {xml.tag: result}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4cdd3fc8f15d4c64e0a7d7dfe44ab0f6e581265bce78f8f303d09e6859d1e7a040a3d39d7be0d5014df62fa858d5390c86662161fe29ad81ce50aab5bd114d7d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "76522992-0dc8-37e5-851b-6bd37149619d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `pattern` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/object_detection/utils/variables_helper.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 40,
                  "snippet": {
                    "text": "      if re.match(pattern, var.op.name):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5e91b42a7997fdf1173d5eb90701be0d385f4c23304a77211facfc0f57270b924b284989e7f93478ebae6bfe155a54e9537a468af9bab3952c16ded8568a786e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d8a7e077-12bb-3a39-abc0-f12ec3b83e1a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/slim/datasets/dataset_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 17,
                  "endLine": 94,
                  "endColumn": 77,
                  "snippet": {
                    "text": "  filepath, _ = urllib.request.urlretrieve(tarball_url, filepath, _progress)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f7ec3883ef1cb0160c16c7b4df3f1e5e9dca76fcfb2b6fae5588618393332de6920c7c3f17ca05089e1496337bef83efadbbb42f10da41cf2cc8295c71071525_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a8a1331a-40eb-3d18-a92a-c6bd8f8baf77",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/slim/datasets/download_and_convert_cifar10.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 14,
                  "endLine": 77,
                  "endColumn": 29,
                  "snippet": {
                    "text": "      data = cPickle.load(f)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "63d0195c4ff7ca4c90e6adc0c60e9c0a428a7b0281a60058a0ba24770cdaedbbc7c8b30118ef8fe55b1cab9c32333cb3fe6b8344bb599042ad34334f0ad7192b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8fc4b12b-bccc-37f2-adbe-36e761ad7750",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/slim/datasets/download_and_convert_cifar10.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 14,
                  "endLine": 79,
                  "endColumn": 47,
                  "snippet": {
                    "text": "      data = cPickle.load(f, encoding='bytes')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "63d0195c4ff7ca4c90e6adc0c60e9c0a428a7b0281a60058a0ba24770cdaedbbc7c8b30118ef8fe55b1cab9c32333cb3fe6b8344bb599042ad34334f0ad7192b_1"
          },
          "properties": {}
        },
        {
          "ruleId": "7e02a04e-2fde-3922-9818-75c9c99c21aa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/slim/datasets/download_and_convert_cifar10.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 19,
                  "endLine": 138,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    filepath, _ = urllib.request.urlretrieve(_DATA_URL, filepath, _progress)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "189ff62b96eb54dbf13b3f778eafc4761b421208c9c16feea846f4f911578534d07b5faadceed5bfc910550e6fba374e2a970df2870864d2e10b68acb6761e39_0"
          },
          "properties": {}
        },
        {
          "ruleId": "61db280b-3c7d-327e-a6a1-9d3a4d18fee6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Possible path traversal through `tarfile.open($PATH).extractall()` if the source tar is controlled by an attacker"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/slim/datasets/download_and_convert_cifar10.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 5,
                  "endLine": 142,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    tarfile.open(filepath, 'r:gz').extractall(dataset_dir)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4fca061fb4f122897fe8d228c4f861d007ee57fcc4a820bbafb99185767ab0f99b192393205e7f3f2a7afdeb8e6d238f88da70629bd0a2ac8b1db169af0474db_0"
          },
          "properties": {}
        },
        {
          "ruleId": "892a679f-cded-3f75-8f9c-395e51c101f5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/slim/datasets/download_and_convert_mnist.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 21,
                  "endLine": 165,
                  "endColumn": 58,
                  "snippet": {
                    "text": "      filepath, _ = urllib.request.urlretrieve(_DATA_URL + filename,\n                                               filepath,\n                                               _progress)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5c5daad7551f8b42763481bf0a4ecd493cef8243772077688b7f8b461a3d709640ca39d2bf2f33cd8ea429ccc026bdba66f42ce4de9ea8bdbbcd831b6ff873d3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "77577e86-10c3-355e-bed9-0d3616517295",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/slim/datasets/imagenet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 17,
                  "endLine": 94,
                  "endColumn": 55,
                  "snippet": {
                    "text": "  filename, _ = urllib.request.urlretrieve(synset_url)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5ce091a537b041d3e7886aa69d99f8d661a0b3f7a1d2db8b04ad6365dddd0b4eb1f40b7999ef8419eca81d840e216a6d720e6cfbd18f3572d272e6f955c16127_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e827fbe2-dcee-3fac-a6ec-d7044ee4e4e0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE)\nattacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'.\nSee https://github.com/tiran/defusedxml for more information.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/slim/datasets/process_bounding_boxes.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 1,
                  "endLine": 87,
                  "endColumn": 35,
                  "snippet": {
                    "text": "import xml.etree.ElementTree as ET"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c07e3322ebbddd1898db94ac540ed15faa5ddb55f9dbee645e213f603c15aef9cb7a012f386dbe27cd239fa021cd7329ea00dc1394e977ad76c0eda86c535fb1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6aa75c5d-5618-38cf-8256-770c0f449fb8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/slim/datasets/imagenet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 17,
                  "endLine": 99,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  filename, _ = urllib.request.urlretrieve(synset_to_human_url)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5ce091a537b041d3e7886aa69d99f8d661a0b3f7a1d2db8b04ad6365dddd0b4eb1f40b7999ef8419eca81d840e216a6d720e6cfbd18f3572d272e6f955c16127_1"
          },
          "properties": {}
        },
        {
          "ruleId": "f3d83d7a-fdcb-36e9-95f2-09b0a32c4ab2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/slim/datasets/process_bounding_boxes.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 12,
                  "endLine": 122,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    tree = ET.parse(xml_file)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "de5e3a5e606722591b3e58c582253d2fc7fbf91a35a0a43d68554b7cfdf9beff6abcdfcf72700c134029d9428f019c6bc47d5dcee9851a2da1bcb01774ea62be_0"
          },
          "properties": {}
        },
        {
          "ruleId": "25e8cb54-38c0-307b-9d7d-15a6bb550be3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/slim/nets/alexnet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 31,
                  "endLine": 42,
                  "endColumn": 75,
                  "snippet": {
                    "text": "trunc_normal = lambda stddev: tf.truncated_normal_initializer(0.0, stddev)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0fe268cd7e3faadce2dd41c35f663407cb23681bee05e702cbb85e887d12bb33c3a4aa8842f31cbfb9a7daf44984d379d38b63d336b441c0eaff0bf7eb705a0d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "67e66c26-a7b9-37f3-898f-dceb85e80737",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/slim/nets/cifarnet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 31,
                  "endLine": 25,
                  "endColumn": 77,
                  "snippet": {
                    "text": "trunc_normal = lambda stddev: tf.truncated_normal_initializer(stddev=stddev)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8162ca4468227ddf7676b6cb8b4919edbd245a59bb72c4975220ebb73df51796962d2da8c76b3930af0d3d400956c16363a2e2ddac27fbf8f9a21b8bd4271c16_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c2c2e148-0959-3524-9a4c-216e1a479e8e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/slim/nets/i3d.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 31,
                  "endLine": 33,
                  "endColumn": 75,
                  "snippet": {
                    "text": "trunc_normal = lambda stddev: tf.truncated_normal_initializer(0.0, stddev)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "dfccac5c19ba51cdabd6ba744464bcae715b932840f3d83284490192315dcac0c7689bb67ae8bbb139e97ea9e199e7637ade156caf5c12e9a1f059fcde57718c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d52221fe-8e41-3d03-80f4-015c5563093d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/slim/nets/inception_v1.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 31,
                  "endLine": 26,
                  "endColumn": 75,
                  "snippet": {
                    "text": "trunc_normal = lambda stddev: tf.truncated_normal_initializer(0.0, stddev)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "684a37ab5fe2436440a65f3a417c05e096f52861c2a611012f5c4b3cd647b0db50283d90dd56ed8ae212e941b3a63af3e6a0019e367de618c914e1610d777bdf_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7c100114-38c1-340d-b32f-e1b37e78547d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/slim/nets/inception_v2.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 31,
                  "endLine": 26,
                  "endColumn": 75,
                  "snippet": {
                    "text": "trunc_normal = lambda stddev: tf.truncated_normal_initializer(0.0, stddev)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7a96f44385c8154e10c76f9d60a819b58caabf5d70dd15dd0f0aec8acffb5e45d0c9415a7412bbe922b1e9a316cc2fe3cd8b34e3f4fa3dc53f4355c99e4e025d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "967e91a7-cb98-3e26-9bf7-5cf9253a02b1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/slim/nets/overfeat.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 31,
                  "endLine": 37,
                  "endColumn": 75,
                  "snippet": {
                    "text": "trunc_normal = lambda stddev: tf.truncated_normal_initializer(0.0, stddev)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "57d91c6d9f9339bdd28b32eb3cad6fff0e18142dfd5e2fd55dd9521dcc886a24ee43a53ae86e0f18bb8e59772a8db86c40333523786a7d25ca854c257bb94c25_0"
          },
          "properties": {}
        },
        {
          "ruleId": "78778830-5536-31aa-a857-ae30f35dcd00",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/slim/nets/inception_v3.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 31,
                  "endLine": 26,
                  "endColumn": 75,
                  "snippet": {
                    "text": "trunc_normal = lambda stddev: tf.truncated_normal_initializer(0.0, stddev)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b900c20f3b5e012a9924de2c9e7268c9fb986372fd503fd7f689c6e007f32d2341dcc6182ce36678a2efe6a0d6d79e8ffce250d7b2a4c82a01b76b0ff1b6c02_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8261e631-1c8c-30ef-9bba-55605d36c54c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "models/research/slim/nets/s3dg.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 31,
                  "endLine": 31,
                  "endColumn": 75,
                  "snippet": {
                    "text": "trunc_normal = lambda stddev: tf.truncated_normal_initializer(0.0, stddev)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6896d3f9e357a7e2d7198e6d6c2900cc5736a5e8aab49dbbd2bc1bb9b8864e3f5846e11a04d5c4af5990522bc7933e98c69fbe71ed314644a057e37a54987014_0"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}